---
name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2:00 UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static security analysis
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('test-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r plugins/ -f json -o bandit-report.json
          bandit -r plugins/ -f txt
        continue-on-error: true

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto plugins/ --json --output=semgrep-report.json
          semgrep --config=auto plugins/
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [python]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  # Vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test-requirements.txt
          pip install pip-audit

      - name: Run pip-audit vulnerability scan
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit
        continue-on-error: true

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: vulnerability-scan-results
          path: pip-audit-report.json

  # SARIF upload (for GitHub Security tab)
  sarif-upload:
    name: Upload SARIF Results
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security scan artifacts
        uses: actions/download-artifact@v3
        with:
          name: security-scan-results

      - name: Convert Bandit results to SARIF
        run: |
          python3 -c "
          import json
          import sys
          from datetime import datetime

          # Read bandit results
          try:
              with open('bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
          except FileNotFoundError:
              print('No bandit report found')
              sys.exit(0)

          # Convert to SARIF format
          sarif = {
              'version': '2.1.0',
              'runs': [{
                  'tool': {
                      'driver': {
                          'name': 'bandit',
                          'version': '1.7.0',
                          'informationUri': 'https://bandit.readthedocs.io/'
                      }
                  },
                  'results': []
              }]
          }

          for result in bandit_data.get('results', []):
              sarif_result = {
                  'ruleId': result['test_id'],
                  'message': {
                      'text': result['issue_text']
                  },
                  'locations': [{
                      'physicalLocation': {
                          'artifactLocation': {
                              'uri': result['filename']
                          },
                          'region': {
                              'startLine': result['line_number']
                          }
                      }
                  }],
                  'level': 'warning' if result['issue_severity'] == 'MEDIUM' else 'error'
              }
              sarif['runs'][0]['results'].append(sarif_result)

          # Write SARIF file
          with open('bandit.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit.sarif
          category: bandit

  # Security test execution
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ansible-core
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Run SQL injection prevention tests
        run: |
          ansible-playbook tests/integration/targets/sqlite_table/tasks/security_tests.yml -v

      - name: Run path traversal prevention tests
        run: |
          ansible-playbook tests/integration/targets/sqlite_db/tasks/security_tests.yml -v

      - name: Test parameterized query safety
        run: |
          ansible-playbook -i localhost, all -c local \
            -e test_db_path=/tmp/security_test.db \
            -e 'malicious_input="test'; DROP TABLE users; --"' \
            tests/security/sql_injection_tests.yml -v

      - name: Test file permission enforcement
        run: |
          ansible-playbook -i localhost, all -c local \
            tests/security/permission_tests.yml -v

  # Report security status
  security-status:
    name: Security Status
    runs-on: ubuntu-latest
    needs: [security-scan, codeql, vulnerability-scan, security-tests]
    if: always()

    steps:
      - name: Check security scan results
        run: |
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"
          echo "Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"

      - name: Create security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Static Analysis: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail on security issues
        if: |
          needs.security-scan.result == 'failure' ||
          needs.codeql.result == 'failure' ||
          needs.vulnerability-scan.result == 'failure' ||
          needs.security-tests.result == 'failure'
        run: |
          echo "‚ùå Security issues detected!"
          exit 1

      - name: Security success
        if: |
          needs.security-scan.result == 'success' &&
          needs.codeql.result == 'success' &&
          needs.vulnerability-scan.result == 'success' &&
          needs.security-tests.result == 'success'
        run: |
          echo "‚úÖ All security checks passed!"
